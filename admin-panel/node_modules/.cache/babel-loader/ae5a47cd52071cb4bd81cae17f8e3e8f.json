{"ast":null,"code":"import{CoreAxiosInstance}from\"@shared/config/axios/core-axios-instantance\";import{concatFilterQuery}from\"@shared/utils\";export var baseService=function baseService(endPoint){return{filter:function filter(options){return CoreAxiosInstance.get(\"\".concat(endPoint,\"?\").concat(concatFilterQuery(options)));},getById:function getById(id){return CoreAxiosInstance.get(endPoint+id);},create:function create(payload){return CoreAxiosInstance.post(endPoint,payload);},update:function update(id,payload){return CoreAxiosInstance.put(endPoint+id,payload);},delete:function _delete(id){return CoreAxiosInstance.delete(endPoint+id);}};};","map":{"version":3,"sources":["/home/jobayer/Documents/@poshapets/poshapets-admin/src/@shared/base/base.service.ts"],"names":["CoreAxiosInstance","concatFilterQuery","baseService","endPoint","filter","options","get","getById","id","create","payload","post","update","put","delete"],"mappings":"AAAA,OAASA,iBAAT,KAAkC,6CAAlC,CAEA,OAASC,iBAAT,KAAkC,eAAlC,CAUA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAA2C,CACrE,MAAO,CACNC,MADM,iBACCC,OADD,CACuB,CAC5B,MAAOL,CAAAA,iBAAiB,CAACM,GAAlB,WAAyBH,QAAzB,aAAqCF,iBAAiB,CAACI,OAAD,CAAtD,EAAP,CACA,CAHK,CAINE,OAJM,kBAIEC,EAJF,CAIc,CACnB,MAAOR,CAAAA,iBAAiB,CAACM,GAAlB,CAAsBH,QAAQ,CAAGK,EAAjC,CAAP,CACA,CANK,CAQNC,MARM,iBAQCC,OARD,CAQe,CACpB,MAAOV,CAAAA,iBAAiB,CAACW,IAAlB,CAAuBR,QAAvB,CAAiCO,OAAjC,CAAP,CACA,CAVK,CAYNE,MAZM,iBAYCJ,EAZD,CAYaE,OAZb,CAY2B,CAChC,MAAOV,CAAAA,iBAAiB,CAACa,GAAlB,CAAsBV,QAAQ,CAAGK,EAAjC,CAAqCE,OAArC,CAAP,CACA,CAdK,CAeNI,MAfM,kBAeCN,EAfD,CAea,CAClB,MAAOR,CAAAA,iBAAiB,CAACc,MAAlB,CAAyBX,QAAQ,CAAGK,EAApC,CAAP,CACA,CAjBK,CAAP,CAmBA,CApBM","sourcesContent":["import { CoreAxiosInstance } from \"@shared/config/axios/core-axios-instantance\"\nimport { IBaseFilter } from \"@shared/interfaces\"\nimport { concatFilterQuery } from \"@shared/utils\"\n\ninterface IBaseServiceMethods {\n\tfilter: (option: IBaseFilter) => Promise<any>\n\tgetById: (id: string) => Promise<any>\n\tcreate: (payload: any) => Promise<any>\n\tupdate: (id: string, payload: any) => Promise<any>\n\tdelete: (id: string) => Promise<any>\n}\n\nexport const baseService = (endPoint: string): IBaseServiceMethods => {\n\treturn {\n\t\tfilter(options: IBaseFilter) {\n\t\t\treturn CoreAxiosInstance.get(`${endPoint}?${concatFilterQuery(options)}`)\n\t\t},\n\t\tgetById(id: string) {\n\t\t\treturn CoreAxiosInstance.get(endPoint + id)\n\t\t},\n\n\t\tcreate(payload: any) {\n\t\t\treturn CoreAxiosInstance.post(endPoint, payload)\n\t\t},\n\n\t\tupdate(id: string, payload: any) {\n\t\t\treturn CoreAxiosInstance.put(endPoint + id, payload)\n\t\t},\n\t\tdelete(id: string) {\n\t\t\treturn CoreAxiosInstance.delete(endPoint + id)\n\t\t},\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}