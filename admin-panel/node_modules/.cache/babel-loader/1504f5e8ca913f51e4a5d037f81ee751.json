{"ast":null,"code":"import { CoreAxiosInstance } from \"@shared/config/axios/core-axios-instantance\";\nimport { concatFilterQuery } from \"@shared/utils\";\nexport const baseService = (endPoint, ICreate, IUpdate) => {\n  return {\n    filter(options) {\n      return CoreAxiosInstance.get(`${endPoint}?${concatFilterQuery(options)}`);\n    },\n\n    getById(id) {\n      return CoreAxiosInstance.get(endPoint + id);\n    },\n\n    create(payload) {\n      return CoreAxiosInstance.post(endPoint, payload);\n    },\n\n    update(id, payload) {\n      return CoreAxiosInstance.put(endPoint + id, payload);\n    },\n\n    delete(id) {\n      return CoreAxiosInstance.delete(endPoint + id);\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/jobayer/Documents/@poshapets/poshapets-admin/src/@shared/base/base.service.ts"],"names":["CoreAxiosInstance","concatFilterQuery","baseService","endPoint","ICreate","IUpdate","filter","options","get","getById","id","create","payload","post","update","put","delete"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6CAAlC;AAEA,SAASC,iBAAT,QAAkC,eAAlC;AAUA,OAAO,MAAMC,WAAW,GAAG,CAC1BC,QAD0B,EAE1BC,OAF0B,EAG1BC,OAH0B,KAID;AACzB,SAAO;AACNC,IAAAA,MAAM,CAACC,OAAD,EAAuB;AAC5B,aAAOP,iBAAiB,CAACQ,GAAlB,CAAuB,GAAEL,QAAS,IAAGF,iBAAiB,CAACM,OAAD,CAAU,EAAhE,CAAP;AACA,KAHK;;AAINE,IAAAA,OAAO,CAACC,EAAD,EAAa;AACnB,aAAOV,iBAAiB,CAACQ,GAAlB,CAAsBL,QAAQ,GAAGO,EAAjC,CAAP;AACA,KANK;;AAQNC,IAAAA,MAAM,CAACC,OAAD,EAA0B;AAC/B,aAAOZ,iBAAiB,CAACa,IAAlB,CAAuBV,QAAvB,EAAiCS,OAAjC,CAAP;AACA,KAVK;;AAYNE,IAAAA,MAAM,CAACJ,EAAD,EAAaE,OAAb,EAAsC;AAC3C,aAAOZ,iBAAiB,CAACe,GAAlB,CAAsBZ,QAAQ,GAAGO,EAAjC,EAAqCE,OAArC,CAAP;AACA,KAdK;;AAeNI,IAAAA,MAAM,CAACN,EAAD,EAAa;AAClB,aAAOV,iBAAiB,CAACgB,MAAlB,CAAyBb,QAAQ,GAAGO,EAApC,CAAP;AACA;;AAjBK,GAAP;AAmBA,CAxBM","sourcesContent":["import { CoreAxiosInstance } from \"@shared/config/axios/core-axios-instantance\"\nimport { IBaseFilter } from \"@shared/interfaces\"\nimport { concatFilterQuery } from \"@shared/utils\"\n\ninterface IBaseServiceMethods {\n\tfilter: (option: IBaseFilter) => Promise<any>\n\tgetById: (id: string) => Promise<any>\n\tcreate: (payload: any) => Promise<any>\n\tupdate: (id: string, payload: any) => Promise<any>\n\tdelete: (id: string) => Promise<any>\n}\n\nexport const baseService = (\n\tendPoint: string,\n\tICreate,\n\tIUpdate\n): IBaseServiceMethods => {\n\treturn {\n\t\tfilter(options: IBaseFilter) {\n\t\t\treturn CoreAxiosInstance.get(`${endPoint}?${concatFilterQuery(options)}`)\n\t\t},\n\t\tgetById(id: string) {\n\t\t\treturn CoreAxiosInstance.get(endPoint + id)\n\t\t},\n\n\t\tcreate(payload: typeof ICreate) {\n\t\t\treturn CoreAxiosInstance.post(endPoint, payload)\n\t\t},\n\n\t\tupdate(id: string, payload: typeof IUpdate) {\n\t\t\treturn CoreAxiosInstance.put(endPoint + id, payload)\n\t\t},\n\t\tdelete(id: string) {\n\t\t\treturn CoreAxiosInstance.delete(endPoint + id)\n\t\t},\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}