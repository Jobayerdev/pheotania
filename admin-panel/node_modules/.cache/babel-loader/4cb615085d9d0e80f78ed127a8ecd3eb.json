{"ast":null,"code":"import { QueryClient } from \"react-query\";\nimport { notification } from \"antd\";\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      useErrorBoundary: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n      onError: err => {\n        console.log(err);\n      },\n      onSuccess: data => {\n        var _data$response, _data$response$data;\n\n        if (!(data === null || data === void 0 ? void 0 : (_data$response = data.response) === null || _data$response === void 0 ? void 0 : (_data$response$data = _data$response.data) === null || _data$response$data === void 0 ? void 0 : _data$response$data.success)) {\n          var _data$response2, _data$response2$data, _data$response2$data$;\n\n          data === null || data === void 0 ? void 0 : (_data$response2 = data.response) === null || _data$response2 === void 0 ? void 0 : (_data$response2$data = _data$response2.data) === null || _data$response2$data === void 0 ? void 0 : (_data$response2$data$ = _data$response2$data.errorMessages) === null || _data$response2$data$ === void 0 ? void 0 : _data$response2$data$.map(x => {\n            return notification.error({\n              message: x,\n              duration: 500\n            });\n          });\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/jobayer/Documents/@poshapets/poshapets-admin/src/@shared/config/react-query/react-query.ts"],"names":["QueryClient","notification","queryClient","defaultOptions","queries","useErrorBoundary","refetchOnWindowFocus","retry","onError","err","console","log","onSuccess","data","response","success","errorMessages","map","x","error","message","duration"],"mappings":"AAAA,SAASA,WAAT,QAAiE,aAAjE;AAIA,SAASC,YAAT,QAA6B,MAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG,IAAIF,WAAJ,CAAgB;AAC1CG,EAAAA,cAAc,EAAE;AACfC,IAAAA,OAAO,EAAE;AACRC,MAAAA,gBAAgB,EAAE,IADV;AAERC,MAAAA,oBAAoB,EAAE,KAFd;AAGRC,MAAAA,KAAK,EAAE,KAHC;AAIRC,MAAAA,OAAO,EAAGC,GAAD,IAAkB;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OANO;AAORG,MAAAA,SAAS,EAAGC,IAAD,IAAe;AAAA;;AACzB,YAAI,EAACA,IAAD,aAACA,IAAD,yCAACA,IAAI,CAAEC,QAAP,0EAAC,eAAgBD,IAAjB,wDAAC,oBAAsBE,OAAvB,CAAJ,EAAoC;AAAA;;AACnCF,UAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,+BAAAA,IAAI,CAAEC,QAAN,4FAAgBD,IAAhB,uGAAsBG,aAAtB,gFAAqCC,GAArC,CAA0CC,CAAD,IAAe;AACvD,mBAAOjB,YAAY,CAACkB,KAAb,CAAmB;AACzBC,cAAAA,OAAO,EAAEF,CADgB;AAEzBG,cAAAA,QAAQ,EAAE;AAFe,aAAnB,CAAP;AAIA,WALD;AAMA;AACD;AAhBO;AADM;AAD0B,CAAhB,CAApB","sourcesContent":["import { QueryClient, UseMutationOptions, UseQueryOptions } from \"react-query\"\n\nimport { AxiosError } from \"axios\"\nimport { PromiseValue } from \"type-fest\"\nimport { notification } from \"antd\"\n\nexport const queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\tuseErrorBoundary: true,\n\t\t\trefetchOnWindowFocus: false,\n\t\t\tretry: false,\n\t\t\tonError: (err: unknown) => {\n\t\t\t\tconsole.log(err)\n\t\t\t},\n\t\t\tonSuccess: (data: any) => {\n\t\t\t\tif (!data?.response?.data?.success) {\n\t\t\t\t\tdata?.response?.data?.errorMessages?.map((x: string) => {\n\t\t\t\t\t\treturn notification.error({\n\t\t\t\t\t\t\tmessage: x,\n\t\t\t\t\t\t\tduration: 500,\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\nexport type QueryConfig<FetcherFnType extends (...args: any) => any> =\n\tUseQueryOptions<PromiseValue<ReturnType<FetcherFnType>>>\n\nexport type MutationConfig<FetcherFnType extends (...args: any) => any> =\n\tUseMutationOptions<\n\t\tPromiseValue<ReturnType<FetcherFnType>>,\n\t\tAxiosError,\n\t\tParameters<FetcherFnType>[0]\n\t>\n"]},"metadata":{},"sourceType":"module"}