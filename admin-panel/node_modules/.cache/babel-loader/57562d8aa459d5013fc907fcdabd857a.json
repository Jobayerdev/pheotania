{"ast":null,"code":"import{AuthService}from\"@shared/services/auth.service\";import{notification}from\"antd\";import{storage}from\"@shared/utils\";import{useMutation}from\"react-query\";import{useNavigate}from\"react-router-dom\";export var useAuth=function useAuth(){var navigation=useNavigate();var loginFn=useMutation({mutationFn:AuthService.login,onSuccess:function onSuccess(val){var _val$data,_val$data$payload;storage.setToken(val===null||val===void 0?void 0:(_val$data=val.data)===null||_val$data===void 0?void 0:(_val$data$payload=_val$data.payload)===null||_val$data$payload===void 0?void 0:_val$data$payload.token);notification.success({message:\"Auth Login Success\"});navigation(\"/\");}});var logoutFn=function logoutFn(){storage.clear();window.location.assign(window.location.origin);};var loadUserFn=function loadUserFn(){};var isAuthenticated=storage.getToken()?true:false;return{loginFn:loginFn,logoutFn:logoutFn,loadUserFn:loadUserFn,isAuthenticated:isAuthenticated};};","map":{"version":3,"sources":["/home/jobayer/Documents/@poshapets/poshapets-admin/src/@modules/auth/hooks/useAuth.ts"],"names":["AuthService","notification","storage","useMutation","useNavigate","useAuth","navigation","loginFn","mutationFn","login","onSuccess","val","setToken","data","payload","token","success","message","logoutFn","clear","window","location","assign","origin","loadUserFn","isAuthenticated","getToken"],"mappings":"AAAA,OAASA,WAAT,KAA4B,+BAA5B,CACA,OAASC,YAAT,KAA6B,MAA7B,CACA,OAASC,OAAT,KAAwB,eAAxB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC5B,GAAMC,CAAAA,UAAU,CAAGF,WAAW,EAA9B,CACA,GAAMG,CAAAA,OAAO,CAAGJ,WAAW,CAAC,CAC3BK,UAAU,CAAER,WAAW,CAACS,KADG,CAE3BC,SAAS,CAAE,mBAACC,GAAD,CAAS,iCACnBT,OAAO,CAACU,QAAR,CAAiBD,GAAjB,SAAiBA,GAAjB,4BAAiBA,GAAG,CAAEE,IAAtB,uDAAiB,UAAWC,OAA5B,4CAAiB,kBAAoBC,KAArC,EACAd,YAAY,CAACe,OAAb,CAAqB,CAAEC,OAAO,CAAE,oBAAX,CAArB,EACAX,UAAU,CAAC,GAAD,CAAV,CACA,CAN0B,CAAD,CAA3B,CAQA,GAAMY,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACtBhB,OAAO,CAACiB,KAAR,GACAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAvC,EACA,CAHD,CAIA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAAE,CAA3B,CACA,GAAMC,CAAAA,eAAe,CAAGvB,OAAO,CAACwB,QAAR,GAAqB,IAArB,CAA4B,KAApD,CACA,MAAO,CACNnB,OAAO,CAAPA,OADM,CAENW,QAAQ,CAARA,QAFM,CAGNM,UAAU,CAAVA,UAHM,CAINC,eAAe,CAAfA,eAJM,CAAP,CAMA,CAtBM","sourcesContent":["import { AuthService } from \"@shared/services/auth.service\"\nimport { notification } from \"antd\"\nimport { storage } from \"@shared/utils\"\nimport { useMutation } from \"react-query\"\nimport { useNavigate } from \"react-router-dom\"\n\nexport const useAuth = () => {\n\tconst navigation = useNavigate()\n\tconst loginFn = useMutation({\n\t\tmutationFn: AuthService.login,\n\t\tonSuccess: (val) => {\n\t\t\tstorage.setToken(val?.data?.payload?.token)\n\t\t\tnotification.success({ message: \"Auth Login Success\" })\n\t\t\tnavigation(\"/\")\n\t\t},\n\t})\n\tconst logoutFn = () => {\n\t\tstorage.clear()\n\t\twindow.location.assign(window.location.origin as unknown as string)\n\t}\n\tconst loadUserFn = () => {}\n\tconst isAuthenticated = storage.getToken() ? true : false\n\treturn {\n\t\tloginFn,\n\t\tlogoutFn,\n\t\tloadUserFn,\n\t\tisAuthenticated,\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}