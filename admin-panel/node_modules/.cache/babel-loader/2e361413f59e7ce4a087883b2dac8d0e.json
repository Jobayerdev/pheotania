{"ast":null,"code":"var _jsxFileName = \"/home/jobayer/Documents/@poshapets/poshapets-admin/src/@modules/auth/lib/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport React from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { storage } from \"@shared/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getSession = () => {\n  try {\n    const token = storage.getToken();\n\n    if (token) {\n      return jwt_decode(token);\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n};\nexport const getPermissions = () => {\n  try {\n    const token = storage.getToken();\n\n    if (token) {\n      const decodeAccessToken = jwt_decode(token);\n      const decodePermissionToken = jwt_decode(decodeAccessToken.permissions);\n      return decodePermissionToken === null || decodePermissionToken === void 0 ? void 0 : decodePermissionToken.permissions;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    return [];\n  }\n};\nexport const hasAccessPermission = (accessList, userPermissions) => {\n  const hasAccess = userPermissions.filter(role => accessList.includes(role));\n  return hasAccess.length > 0;\n};\nexport const ProtectRouteAccess = ({\n  accessList,\n  component: Component\n}) => {\n  _s();\n\n  let location = useLocation();\n  const hasAccess = hasAccessPermission(accessList, getPermissions());\n  return hasAccess ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    state: {\n      from: location\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ProtectRouteAccess, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = ProtectRouteAccess;\nexport const ProtectDOMAccess = ({\n  accessList,\n  children\n}) => {\n  const hasAccess = hasAccessPermission(accessList, getPermissions());\n  return hasAccess ? {\n    children\n  } : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 36\n  }, this);\n};\n_c2 = ProtectDOMAccess;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProtectRouteAccess\");\n$RefreshReg$(_c2, \"ProtectDOMAccess\");","map":{"version":3,"sources":["/home/jobayer/Documents/@poshapets/poshapets-admin/src/@modules/auth/lib/index.tsx"],"names":["Navigate","useLocation","React","jwt_decode","storage","getSession","token","getToken","error","getPermissions","decodeAccessToken","decodePermissionToken","permissions","hasAccessPermission","accessList","userPermissions","hasAccess","filter","role","includes","length","ProtectRouteAccess","component","Component","location","from","ProtectDOMAccess","children"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,OAAOC,KAAP,MAAoC,OAApC;AAIA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAA0B;AACnD,MAAI;AACH,UAAMC,KAAuB,GAAGF,OAAO,CAACG,QAAR,EAAhC;;AACA,QAAID,KAAJ,EAAW;AACV,aAAOH,UAAU,CAACG,KAAD,CAAjB;AACA,KAFD,MAEO;AACN,aAAO,KAAP;AACA;AACD,GAPD,CAOE,OAAOE,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CAXM;AAYP,OAAO,MAAMC,cAAc,GAAG,MAAqB;AAClD,MAAI;AACH,UAAMH,KAAuB,GAAGF,OAAO,CAACG,QAAR,EAAhC;;AACA,QAAID,KAAJ,EAAW;AACV,YAAMI,iBAA2B,GAAGP,UAAU,CAACG,KAAD,CAA9C;AACA,YAAMK,qBAA0B,GAAGR,UAAU,CAC5CO,iBAAiB,CAACE,WAD0B,CAA7C;AAGA,aAAOD,qBAAP,aAAOA,qBAAP,uBAAOA,qBAAqB,CAAEC,WAA9B;AACA,KAND,MAMO;AACN,aAAO,EAAP;AACA;AACD,GAXD,CAWE,OAAOJ,KAAP,EAAc;AACf,WAAO,EAAP;AACA;AACD,CAfM;AAiBP,OAAO,MAAMK,mBAAmB,GAAG,CAClCC,UADkC,EAElCC,eAFkC,KAGrB;AACb,QAAMC,SAAS,GAAGD,eAAe,CAACE,MAAhB,CAAwBC,IAAD,IACxCJ,UAAU,CAACK,QAAX,CAAoBD,IAApB,CADiB,CAAlB;AAIA,SAAOF,SAAS,CAACI,MAAV,GAAmB,CAA1B;AACA,CATM;AAWP,OAAO,MAAMC,kBAGX,GAAG,CAAC;AAAEP,EAAAA,UAAF;AAAcQ,EAAAA,SAAS,EAAEC;AAAzB,CAAD,KAA0C;AAAA;;AAC9C,MAAIC,QAAQ,GAAGvB,WAAW,EAA1B;AACA,QAAMe,SAAkB,GAAGH,mBAAmB,CAACC,UAAD,EAAaL,cAAc,EAA3B,CAA9C;AACA,SAAOO,SAAS,gBACf,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UADe,gBAGf,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAiB,IAAA,KAAK,EAAE;AAAES,MAAAA,IAAI,EAAED;AAAR;AAAxB;AAAA;AAAA;AAAA;AAAA,UAHD;AAKA,CAXM;;GAAMH,kB;UAIGpB,W;;;KAJHoB,kB;AAYb,OAAO,MAAMK,gBAGX,GAAG,CAAC;AAAEZ,EAAAA,UAAF;AAAca,EAAAA;AAAd,CAAD,KAA8B;AAClC,QAAMX,SAAkB,GAAGH,mBAAmB,CAACC,UAAD,EAAaL,cAAc,EAA3B,CAA9C;AACA,SAAOO,SAAS,GAAG;AAAEW,IAAAA;AAAF,GAAH,gBAAkB;AAAA;AAAA;AAAA;AAAA,UAAlC;AACA,CANM;MAAMD,gB","sourcesContent":["import { Navigate, useLocation } from \"react-router-dom\"\nimport React, { ReactElement } from \"react\"\n\nimport { ISession } from \"..\"\nimport { PermissionsTypes } from \"@shared/enums\"\nimport jwt_decode from \"jwt-decode\"\nimport { storage } from \"@shared/utils\"\n\nexport const getSession = (): ISession | boolean => {\n\ttry {\n\t\tconst token: string | boolean = storage.getToken()\n\t\tif (token) {\n\t\t\treturn jwt_decode(token)\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t} catch (error) {\n\t\treturn false\n\t}\n}\nexport const getPermissions = (): string[] | [] => {\n\ttry {\n\t\tconst token: string | boolean = storage.getToken()\n\t\tif (token) {\n\t\t\tconst decodeAccessToken: ISession = jwt_decode(token)\n\t\t\tconst decodePermissionToken: any = jwt_decode(\n\t\t\t\tdecodeAccessToken.permissions\n\t\t\t)\n\t\t\treturn decodePermissionToken?.permissions\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t} catch (error) {\n\t\treturn []\n\t}\n}\n\nexport const hasAccessPermission = (\n\taccessList: string[],\n\tuserPermissions: string[]\n): boolean => {\n\tconst hasAccess = userPermissions.filter((role: string) =>\n\t\taccessList.includes(role)\n\t)\n\n\treturn hasAccess.length > 0\n}\n\nexport const ProtectRouteAccess: React.FC<{\n\taccessList: PermissionsTypes[]\n\tcomponent: any\n}> = ({ accessList, component: Component }) => {\n\tlet location = useLocation()\n\tconst hasAccess: boolean = hasAccessPermission(accessList, getPermissions())\n\treturn hasAccess ? (\n\t\t<Component />\n\t) : (\n\t\t<Navigate to=\"/\" state={{ from: location }} />\n\t)\n}\nexport const ProtectDOMAccess: React.FC<{\n\taccessList: PermissionsTypes[]\n\tchildren?: ReactElement<any, any>\n}> = ({ accessList, children }) => {\n\tconst hasAccess: boolean = hasAccessPermission(accessList, getPermissions())\n\treturn hasAccess ? { children } : <span></span>\n}\n"]},"metadata":{},"sourceType":"module"}